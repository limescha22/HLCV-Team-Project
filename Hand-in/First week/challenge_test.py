# -*- coding: utf-8 -*-
"""

    DO NOT EDIT THIS FILE.
    EDITS TO THIS FILE ARE NOT CONSIDERED.
    
    This file is imported by your test evaluation implementation
    (see challenge_train.py) and will be run to test your model.
    
    To test whether your submission is working (and as a sanity check),
    you can copy & paste the validation split into a "test" folder.

"""

from abc import abstractmethod
from typing import final
import torch, torchvision

class Test:
    @abstractmethod
    def __init__(self):
        pass
    
    @abstractmethod
    def create_model(self):
        pass
    
    @abstractmethod
    def create_transform(self):
        pass
    
    @final
    def test_model(
            self,
            root = "../../data/val",
            # device = "cuda",
            weights = "model.torch"
        ):
        model = self.create_model()
        assert issubclass(model.__class__, torch.nn.Module)
        num_par = sum([torch.prod(torch.tensor(p.shape)) for p in model.parameters()]).item()
        assert num_par <= 10_000
        
        state_dict = torch.load(weights, weights_only=True)
        model.load_state_dict(state_dict, strict=False)
        # model = model.to(device)
        
        dataset_test = torchvision.datasets.ImageFolder(
            root = root,
            transform = self.create_transform()
        )
        
        dl_test = torch.utils.data.DataLoader(
            dataset = dataset_test,
            batch_size = 1024,
            shuffle = False,
            num_workers = 1
        )
        
        model.eval()
        correct = 0
        total = 0
        
        cm = torch.zeros(10,10)
        
        with torch.no_grad():
            for images, labels in dl_test:
                # images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, preds = torch.max(outputs, 1)
                correct += (preds == labels).sum().item()
                total += labels.size(0)
                for i, j in torch.stack([preds, labels]).cpu().T.tolist():
                    cm[i,j] += 1
        
        return correct / total, cm



if __name__ == "__main__":
    from challenge_train import Trainer
    Trainer.test_model = Test.test_model
    
    trainer = Trainer()
    acc, cm = trainer.test_model()